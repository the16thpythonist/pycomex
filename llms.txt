# PyComex - Python Computational Experiments

> AI-optimized documentation guide for PyComex microframework

## Project Motivation

PyComex is a microframework for creating, executing, and managing computational experiments in Python. It solves common problems in scientific computing and data science:

- **Asset Management Chaos**: Scattered files across directories make it impossible to track which outputs belong to which experiment
- **Reproducibility Issues**: Missing metadata about parameters, environment, and exact code version used
- **Experiment Evolution**: Difficulty managing variations and parameter sweeps without code duplication
- **Post-Analysis Friction**: No systematic way to reload and analyze completed experiments
- **Metadata Tracking**: Manual bookkeeping of metrics and results in inconsistent formats

PyComex provides automatic folder structure creation, metadata tracking, file artifact management, and boilerplate analysis code generation. Think of it as a local alternative to Weights & Biases with a focus on flexibility and extensibility.

## How It Works - High Level Architecture

### Core Concept: Self-Contained Experiment Scripts

Each experiment is a standalone Python module where:
- **Uppercase global variables** are automatically detected as configurable parameters
- **Main function** is decorated with `@Experiment()` decorator
- **Archive folder** is automatically created for each run with timestamp
- **All artifacts** (logs, data, figures, code snapshot) are stored together

### Key Components

**1. Experiment Decorator Pattern**
```python
from pycomex.functional.experiment import Experiment

@Experiment(base_path=..., namespace=..., glob=globals())
def experiment(e: Experiment):
    # Experiment code here
    e.log("message")              # Logging
    e["data/key"] = value         # Store structured data
    e.track("metric", value)       # Track time-series
    e.commit_fig("plot", fig)      # Save matplotlib figure
```

**2. Parameter Detection System**
- Uppercase variables in module scope become parameters
- Can be overridden via CLI: `python exp.py --PARAM value`
- Type annotations enable automatic parsing
- `ActionableParameterType` for special parameter behaviors

**3. Automatic Archive Structure**
```
{namespace}/
└── {timestamp}/ or debug/
    ├── experiment_meta.json    # Parameters and metadata
    ├── experiment_data.json    # All stored data
    ├── experiment_out.log      # Execution logs
    ├── experiment_code.py      # Code snapshot
    ├── analysis.py            # Auto-generated analysis boilerplate
    └── [custom artifacts]     # Committed files/figures
```

**4. Hook System**
Two types of hooks:
- **Experiment-specific hooks**: `@experiment.hook("name")` - User-defined injection points
- **Plugin system hooks**: `before_experiment`, `after_experiment`, etc. - Framework lifecycle events

**5. Plugin Architecture**
- Internal plugins in `pycomex/plugins/`
- External plugins as packages: `pycomex_{name}`
- Plugins register to lifecycle hooks
- Examples: notifications, W&B integration, auto-plotting

**6. Experiment Inheritance**
```python
experiment = Experiment.extend(
    experiment_path="base_experiment.py",
    # Override parameters, hooks, configuration
)
```

**7. Configuration Files (YAML)**
Create YAML config files to run parameter variations without code duplication:
```yaml
extend: base_experiment.py
parameters:
  PARAM1: value1
  PARAM2: value2
```
Run with: `pycomex run config.yml`

**8. Experiment Mixins**
Reusable hook implementations shared across experiments without code duplication:
```python
# Create mixin once
mixin = ExperimentMixin(glob=globals())
@mixin.hook("before_run", replace=False)
def log_start(e):
    e.log("Starting...")

# Include in any experiment
experiment.include('mixin.py')
```
YAML: `include: mixin.py` or `include: [mixin1.py, mixin2.py]`

## Quick Reference - Core APIs

### Experiment Class Methods
- `e.log(message)` - Log to stdout and file
- `e[key] = value` - Store nested data (e.g., "config/learning_rate")
- `e.track(name, value)` - Track time-series data with auto-visualization
- `e.commit_fig(name, figure)` - Save matplotlib figure
- `e.commit_json(name, data)` - Save JSON file
- `e.commit_raw(name, content)` - Save text file
- `e.apply_hook(name, **kwargs)` - Execute registered hook

### CLI Commands
- `pycomex template experiment <file>` - Create new experiment from template
- `pycomex template config -e <exp> -n <name>` - Create config file from experiment
- `pycomex run <file.py>` - Run experiment module
- `pycomex run <config.yml>` - Run configuration file
- `pycomex archive list` - List recent experiments
- `pycomex archive overview` - Show experiment details
- `pycomex archive compress <path>` - Archive old experiments
- `pycx` - Short alias for pycomex

### Special Variables
- `__DEBUG__ = True` - Reuse same "debug" folder instead of timestamp
- `__VERSION__ = "1.0.0"` - Experiment version metadata

## Package Structure

```
pycomex/
├── functional/              # Modern functional-style experiment system
│   ├── experiment.py       # Main Experiment class (2600+ lines, core implementation)
│   ├── cache.py            # ExperimentCache for caching decorator
│   ├── parameter.py        # ActionableParameterType system
│   └── testing.py          # Testing utilities
│
├── plugins/                # Built-in plugin implementations
│   ├── notify/            # Notification system (desktop/email)
│   ├── plot_track/        # Automatic plotting of tracked metrics
│   └── weights_biases/    # Weights & Biases integration
│
├── templates/             # Jinja2 templates for code generation
│   └── [*.jinja2]        # Experiment and analysis templates
│
├── examples/              # Practical example experiments
│   ├── 01_quickstart.py
│   ├── 02_basic.py
│   ├── 03_analysing.py
│   ├── 04_inheritance.py
│   ├── 05_testing_mode.py
│   ├── 06_run_experiment.py
│   ├── 07_meta_experiment.py
│   ├── 08_weights_and_biases.py
│   ├── 10_caching.py
│   └── 11_experiment_mixin.py
│
├── cli/                   # Rich-based CLI implementation (refactored package)
│   ├── __init__.py       # Public API exports (ExperimentCLI, CLI, cli)
│   ├── main.py           # CLI and ExperimentCLI base classes + utility methods
│   ├── display.py        # Rich display classes for output formatting
│   ├── utils.py          # Helper functions (section, subsection)
│   └── commands/         # Command implementations via mixins
│       ├── run.py        # RunCommandsMixin (run, reproduce, inspect)
│       ├── template.py   # TemplateCommandsMixin (template operations)
│       └── archive.py    # ArchiveCommandsMixin (archive management)
│
├── config.py              # Global Pydantic-based configuration
├── plugin.py              # Plugin base class
├── util.py / utils.py     # Utility functions
├── experiment.py          # Legacy experiment class
├── testing.py             # Testing framework utilities
└── work.py               # Work management utilities

docs/                      # MkDocs documentation
├── introduction.md       # Getting started guide
├── philosophy.md         # Design rationale and problem solutions
├── basics_hooks.md       # Hook system basics
├── basics_mixins.md      # Experiment mixins (reusable hooks)
├── basics_config.md      # Configuration files (YAML) guide
├── advanced_hooks.md     # Plugin system hooks reference
├── advanced_plugins.md   # Plugin development guide
└── tools_vscode.md       # VSCode extension documentation
```

## Documentation Map - Where to Find What

### Getting Started
- **Installation & Quickstart**: `README.rst` or `docs/introduction.md`
- **Basic experiment structure**: `docs/introduction.md` lines 44-95
- **Philosophy and motivation**: `docs/philosophy.md`
- **Simplest example**: `pycomex/examples/01_quickstart.py`

### Core Features
- **Experiment class reference**: `pycomex/functional/experiment.py`
  - Constructor parameters: lines 57-100
  - Storage methods (`e[key]`): search for `__setitem__`
  - Tracking methods: search for `def track`
  - Commit methods: search for `commit_fig`, `commit_json`, `commit_raw`

- **Parameter system**: `pycomex/functional/parameter.py`
  - ActionableParameterType: enables special parameter behaviors

- **Configuration**: `pycomex/config.py`
  - Global Config class with Pydantic validation
  - Plugin registration and discovery

### Advanced Features

**Hooks (User-Defined)**
- **Basics**: `docs/basics_hooks.md`
- **Registration**: `@experiment.hook("name")`
- **Execution**: `e.apply_hook("name", **kwargs)`
- **Inheritance**: Child experiments can override parent hooks
- **Example**: `pycomex/examples/04_inheritance.py`

**Plugin System (Framework Hooks)**
- **Plugin development guide**: `docs/advanced_plugins.md`
- **Hook reference**: `docs/advanced_hooks.md`
- **Plugin base class**: `pycomex/plugin.py`
- **Built-in plugins**: `pycomex/plugins/{notify,plot_track,weights_biases}/`
- **External plugin pattern**: Package named `pycomex_{name}` with `main.py`

**Experiment Inheritance**
- **Example**: `pycomex/examples/04_inheritance.py`
- **API**: `Experiment.extend(experiment_path=...)`
- **Use cases**: Parameter variations, hook overrides, experiment composition

**Configuration Files**
- **Guide**: `docs/basics_config.md`
- **Examples**: `pycomex/examples/09_experiment_config.yml`, `pycomex/examples/test.yml`
- **API**: `Experiment.from_config(config_path=...)`
- **Use cases**: Parameter sweeps, quick variations without code duplication

**Experiment Mixins**
- **Guide**: `docs/basics_mixins.md`
- **Examples**: `pycomex/examples/11_experiment_mixin.py`, `pycomex/examples/11_experiment_mixin_mixin.py`, `pycomex/examples/12_experiment_mixin.yml`
- **API**: `experiment.include('mixin.py')` or YAML `include: mixin.py`
- **Use cases**: Reusable hooks, standardized logging/validation, code deduplication

**Caching**
- **Example**: `pycomex/examples/10_caching.py`
- **Implementation**: `pycomex/functional/cache.py`
- **Decorator**: `@ExperimentCache.decorator()`

**Testing**
- **Testing utilities**: `pycomex/functional/testing.py`
- **Example**: `pycomex/examples/05_testing_mode.py`

**Analysis & Reloadability**
- **Example**: `pycomex/examples/03_analysing.py`
- **Auto-generated**: Each archive gets `analysis.py` boilerplate
- **Loading experiments**: Use template code in generated `analysis.py`

### CLI Usage
- **Implementation**: `pycomex/cli/` package
  - Main classes: `pycomex/cli/main.py` (CLI and ExperimentCLI)
  - Command mixins: `pycomex/cli/commands/` (run.py, template.py, archive.py)
  - Display components: `pycomex/cli/display.py`
- **Commands**:
  - Template management: `pycomex/cli/commands/template.py` (TemplateCommandsMixin)
  - Archive operations: `pycomex/cli/commands/archive.py` (ArchiveCommandsMixin)
  - Experiment execution: ExperimentCLI class in `pycomex/cli/main.py`
- **Help**: Run `pycomex --help` or `pycx --help`

### Examples by Topic

| Topic | File | Description |
|-------|------|-------------|
| Basic workflow | `01_quickstart.py` | Minimal working example |
| Full features | `02_basic.py` | Data storage, tracking, commits |
| Post-analysis | `03_analysing.py` | Loading and analyzing archives |
| Inheritance | `04_inheritance.py` | Extending experiments |
| Testing | `05_testing_mode.py` | Testing framework integration |
| Programmatic execution | `06_run_experiment.py` | Running experiments from code |
| Meta-experiments | `07_meta_experiment.py` | Experiments that run experiments |
| W&B integration | `08_weights_and_biases.py` | Weights & Biases plugin |
| Config files | `09_experiment_config.yml` | YAML configuration for parameter variations |
| Caching | `10_caching.py` | Result caching system |
| Mixins | `11_experiment_mixin.py` | Reusable hooks via mixins |

## Common Tasks - Quick Pointers

### Creating a New Experiment
1. Use template: `pycomex template experiment my_exp.py`
2. Or manually create with structure from `docs/introduction.md` (lines 48-95)
3. Key imports: `from pycomex.functional.experiment import Experiment`
4. Required decorator arguments: `base_path`, `namespace`, `glob`

### Using Hooks in Experiments
1. Read basics: `docs/basics_hooks.md`
2. Define before main function: `@experiment.hook("hook_name")`
3. Execute in experiment: `e.apply_hook("hook_name", **kwargs)`
4. See working example: `pycomex/examples/04_inheritance.py`

### Writing a Plugin
1. Read guide: `docs/advanced_plugins.md`
2. Create package: `pycomex_{plugin_name}`
3. Create `main.py` with `Plugin` subclass
4. Register to hooks: `@hook('hook_name', priority=0)`
5. Available hooks: `docs/advanced_hooks.md`
6. Examples: `pycomex/plugins/{notify,plot_track,weights_biases}/`

### Managing Archives
- List: `pycomex archive list`
- View: `pycomex archive overview [path]`
- Compress: `pycomex archive compress [path]`
- Archive structure: See "Automatic Archive Structure" above

### Running Experiments
- Direct: `python my_experiment.py`
- With overrides: `python my_experiment.py --PARAM1 value1 --PARAM2 value2`
- Get help: `python my_experiment.py --help`
- Via CLI: `pycomex run experiment.py` or `pycomex run config.yml`
- From code: See `pycomex/examples/06_run_experiment.py`
- Config files: See `docs/basics_config.md` and `pycomex/examples/09_experiment_config.yml`

### Debugging
- Enable debug mode: Set `__DEBUG__ = True` in experiment
- This reuses same "debug" folder instead of creating new timestamps
- Useful for development iterations

### Parameter Types
- Basic types: Detected from type annotations
- Special behaviors: Use `ActionableParameterType` from `pycomex/functional/parameter.py`
- CLI override format: `--PARAM_NAME value`

## Development Commands

Testing: `pytest` or `make test` or `nox -s test`
Building: `nox -s build` or `uv build --python=3.10`
Documentation: `mkdocs serve` (local server) or `mkdocs build` (static site)
Publishing: `twine upload dist/*`
Version bump: `bump-my-version bump [patch|minor|major]`

## Important Notes for AI Assistants

1. **Primary experiment class**: Use `pycomex.functional.experiment.Experiment` (not `pycomex.experiment`)
2. **Docstring format**: ReStructuredText (reST) - see CLAUDE.md for examples
3. **Virtual environment**: Project uses venv at `.venv/bin/activate`
4. **Hook execution timing**: User hooks are on-demand via `apply_hook()`, plugin hooks are lifecycle events
5. **Parameter detection**: Only UPPERCASE module-level variables become parameters
6. **Archive location**: `{base_path}/{namespace}/{timestamp or 'debug'}/`
7. **CLI entry points**: Both `pycomex` and `pycx` work

## Key Files to Reference

- **Main implementation**: `pycomex/functional/experiment.py` (86k+ bytes)
- **CLI implementation**: `pycomex/cli/` package (refactored into modular structure)
  - Base classes: `pycomex/cli/main.py`
  - Command implementations: `pycomex/cli/commands/{run,template,archive}.py`
- **Configuration**: `pycomex/config.py`
- **Best practices**: `CLAUDE.md` (project-specific AI instructions)
- **Human docs**: `docs/` directory with MkDocs site
- **Live examples**: `pycomex/examples/` directory

---

This guide is optimized for LLM consumption. For human-readable documentation, see:
- Online docs: https://the16thpythonist.github.io/pycomex/
- Repository: https://github.com/the16thpythonist/pycomex
